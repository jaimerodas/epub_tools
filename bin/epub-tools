#!/usr/bin/env ruby
require_relative '../lib/epub_tools'

prog = File.basename($PROGRAM_NAME)
# Global version flag: print version and exit if invoked as `epub-tools -v/--version`
if ['-v', '--version'].include?(ARGV[0])
  puts EpubTools::VERSION
  exit 0
end

# Register all commands with their classes, required options, and defaults
helper = EpubTools::CLIHelper
helper.register_command('add', EpubTools::AddChapters,
                        %i[chapters_dir epub_oebps_dir])

helper.register_command('extract', EpubTools::XHTMLExtractor,
                        %i[source_dir target_dir],
                        { verbose: true })

helper.register_command('split', EpubTools::SplitChapters,
                       %i[input_file book_title],
                       { output_dir: './chapters', prefix: 'chapter', verbose: true })

helper.register_command('init', EpubTools::EpubInitializer,
                       %i[title author destination], verbose: true)

helper.register_command('pack', EpubTools::PackEbook,
                       %i[input_dir output_file],
                       { verbose: true })

helper.register_command('unpack', EpubTools::UnpackEbook,
                       [:epub_file],
                       { verbose: true })

helper.register_command('compile', EpubTools::CompileBook,
                       %i[title author source_dir],
                       { verbose: true })

commands = helper.commands

if ARGV.empty? || !commands.include?(ARGV[0])
  puts <<~USAGE
    Usage: #{prog} COMMAND [options]
    Commands:
      init      Initialize a bare-bones EPUB
      extract   Extract XHTML files from EPUBs
      split     Split XHTML into separate XHTMLs per chapter
      add       Add chapter XHTML files into an EPUB
      pack      Package an EPUB directory into a .epub file
      unpack    Unpack an EPUB file into a directory
      compile   Takes EPUBs in a dir and splits, cleans, and compiles into a single EPUB.
  USAGE
  exit 1
end

cmd = ARGV.shift

# Handle specific command option configurations
case cmd
when 'add'
  helper.handle_command(prog, cmd) do |opts, options|
    opts.on('-c DIR', '--chapters-dir DIR', 'Chapters directory (required)') { |v| options[:chapters_dir] = v }
    opts.on('-e DIR', '--epub-oebps-dir DIR', 'EPUB OEBPS directory (required)') { |v| options[:epub_oebps_dir] = v }
  end

when 'extract'
  helper.handle_command(prog, cmd) do |opts, options|
    opts.on('-s DIR', '--source-dir DIR', 'Directory with EPUBs to extract XHTMLs from (required)') do |v|
      options[:source_dir] = v
    end
    opts.on('-t DIR', '--target-dir DIR', 'Directory where the XHTML files will be extracted to (required)') do |v|
      options[:target_dir] = v
    end
    helper.add_verbose_option(opts, options)
  end

when 'split'
  helper.handle_command(prog, cmd) do |opts, options|
    opts.on('-i FILE', '--input FILE', 'Source XHTML file (required)') { |v| options[:input_file] = v }
    opts.on('-t TITLE', '--title TITLE', 'Book title for HTML <title> tags (required)') { |v| options[:book_title] = v }
    opts.on('-o DIR', '--output-dir DIR',
            "Output directory for chapter files (default: #{options[:output_dir]})") do |v|
      options[:output_dir] = v
    end
    opts.on('-p PREFIX', '--prefix PREFIX', "Filename prefix for chapters (default: #{options[:prefix]})") do |v|
      options[:prefix] = v
    end
    helper.add_verbose_option(opts, options)
  end

when 'init'
  helper.handle_command(prog, cmd) do |opts, options|
    helper.add_title_option(opts, options)
    helper.add_author_option(opts, options)
    opts.on('-o DIR', '--output-dir DIR', 'Destination EPUB directory (required)') { |v| options[:destination] = v }
    helper.add_cover_option(opts, options)
  end

when 'pack'
  helper.handle_command(prog, cmd) do |opts, options|
    helper.add_input_dir_option(opts, options, 'EPUB directory to package')
    helper.add_output_file_option(opts, options, 'Output EPUB file path')
    helper.add_verbose_option(opts, options)
  end

when 'unpack'
  helper.handle_command(prog, cmd) do |opts, options|
    opts.on('-i FILE', '--input-file FILE', 'EPUB file to unpack (required)') { |v| options[:epub_file] = v }
    opts.on('-o DIR', '--output-dir DIR', 'Output directory to extract into (default: basename of epub)') do |v|
      options[:output_dir] = v
    end
    helper.add_verbose_option(opts, options)
  end

when 'compile'
  helper.handle_command(prog, cmd) do |opts, options|
    helper.add_title_option(opts, options)
    helper.add_author_option(opts, options)
    opts.on('-s DIR', '--source-dir DIR', 'Directory with EPUBs to extract XHTMLs from (required)') do |v|
      options[:source_dir] = v
    end
    opts.on('-o FILE', '--output FILE', 'EPUB to create (default: book title in source dir)') do |v|
      options[:output_file] = v
    end
    helper.add_cover_option(opts, options)
    helper.add_verbose_option(opts, options)
  end
end
